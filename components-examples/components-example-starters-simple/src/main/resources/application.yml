spring:
  # 在SpringBoot 2.1之前，这个配置默认就是true，而在2.1做了更改。
  # 设置为true后，因为FeignClientSpecification的原因，FeignClient注解的configuration参数会被覆盖。
  main:
    allow-bean-definition-overriding: true
  application:
    name: components-example-starters-simple
  profiles:
    active: local
  h2:
    console:
      # h2嵌入式数据库控制台，可以通过浏览器访问
      path: /h2Console
      enabled: true
  datasource:
    url: jdbc:h2:/Users/jphoebe/opt/code/IdeaProjects/github/zoe-components/components-examples/components-example-starters-simple/src/main/resources/db/exampleStarters
    driver-class-name: org.h2.Driver
    username: sa
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1, 10.30.8.118
        # IP黑名单 (存在共同时，deny优先于allow)
        deny: 192.168.1.73
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: 123456

server:
  port: 8080
  undertow:
    max-http-post-size: 4
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
    io-threads: 4
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
    worker-threads: 32
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #   buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true

logging:
  config: classpath:logConfig/log4j2.xml

feign:
  client:
    config:
      default:
        connectTimeout: 1000
        readTimeout: 12000
  hystrix:
    enabled: false
  sentinel:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 200
    max-connections-per-route: 50
  okhttp:
    enabled: true


ribbon:
  # 随机
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
  # 轮询
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
  # 先按照RoundRobinRule（轮询）策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule
  # 响应时间权重
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
  # 先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule
  # 先过滤掉由于多次访问故障而处于断路器状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.AvailabilityFilteringRule
  # 根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大被选中的概率越大。刚启动时如果统计信息不足，则使用RoundRobinRule（轮询）策略，等统计信息足够，会切换到WeightedResponseTimeRule
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
  # 复合判断Server所在区域的性能和Server的可用性选择服务器
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule
  ConnectTimeout: 1000 #请求连接超时时间
  ReadTimeout: 3000 #请求处理的超时时间
  OkToRetryOnAllOperations: true #对所有请求都进行重试
  MaxAutoRetriesNextServer: 2 #切换实例的重试次数
# 服务名
xxxxxService:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
    ConnectTimeout: 1000 #请求连接超时时间
    ReadTimeout: 3000 #请求处理的超时时间
    OkToRetryOnAllOperations: true #对所有请求都进行重试
    MaxAutoRetriesNextServer: 2 #切换实例的重试次数


zoe:
  database:
    config:
      sql-healthy-check: false
      mapper-class-location: com.zoe.framework.components.example.starters.mapper
  annotation:
    config:
      access-control:
        release-alias:
          - exampleAnnotationAccessControl1
